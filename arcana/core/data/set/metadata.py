import typing as ty
import attrs
from arcana.core import PACKAGE_NAME, __version__, CODE_URL


@attrs.define
class ContainerMetadata:

    type: str = None
    tag: str = None
    uri: str = None

    def to_dict(self, **kwargs):
        dct = {}
        if self.type:
            dct["Type"] = self.type
        if self.tag:
            dct["Tag"] = self.tag
        if self.uri:
            dct["URI"] = self.uri
        return dct

    @classmethod
    def fromdict(cls, dct):
        if dct is None:
            return None
        return ContainerMetadata(
            type=dct.get("Type"), tag=dct.get("Tag"), uri=dct.get("URI")
        )


@attrs.define
class GeneratorMetadata:

    name: str = PACKAGE_NAME
    version: str = __version__
    description: str = f"Empty dataset created by {PACKAGE_NAME}"
    code_url: str = CODE_URL
    container: ContainerMetadata = None

    def to_dict(self, **kwargs):
        dct = {"Name": self.name}
        if self.version:
            dct["Version"] = self.version
        if self.description:
            dct["Description"] = self.description
        if self.code_url:
            dct["CodeURL"] = self.code_url
        if self.container:
            dct["Container"] = self.container.to_dict()
        return dct

    @classmethod
    def fromdict(cls, dct):
        return GeneratorMetadata(
            name=dct["Name"],
            version=dct.get("Version"),
            description=dct.get("Description"),
            code_url=dct.get("CodeURL"),
            container=ContainerMetadata.fromdict(dct.get("Container")),
        )


@attrs.define
class SourceDatasetMetadata:

    url: str = None
    doi: str = None
    version: str = None

    def to_dict(self, **kwargs):
        dct = {}
        if self.url:
            dct["URL"] = self.url
        if self.doi:
            dct["DOI"] = self.doi
        if self.version:
            dct["Version"] = self.version
        return dct

    @classmethod
    def fromdict(cls, dct):
        if dct is None:
            return None
        return SourceDatasetMetadata(
            url=dct.get("URL"), doi=dct.get("DOI"), version=dct.get("Version")
        )


DEFAULT_README = f"""
This dataset was specified/generated using the Arcana analysis workflows framework
{CODE_URL}. However, no specific README was provided so this template is used instead.

The dataset could have been defined on already existing data, using

    $ arcana dataset ...

or via the Python API
"""


@attrs.define(kw_only=True)
class DatasetMetadata:

    name: str = attrs.field(default="Autogenerated-dataset")
    generated_by: ty.List[GeneratorMetadata] = attrs.field()
    acknowledgements: str = attrs.field(default="Generic BIDS dataset", repr=False)
    authors: ty.List[str] = attrs.field(factory=list, repr=False)
    doi: str = attrs.field(default=None, repr=False)
    funding: ty.List[str] = attrs.field(factory=list, repr=False)
    license: str = attrs.field(default="CC0", repr=False)
    references: ty.List[str] = attrs.field(factory=list)
    how_to_acknowledge: str = attrs.field(default="see licence")
    ethics_approvals: ty.List[str] = attrs.field(factory=list)
    sources: ty.List[SourceDatasetMetadata] = attrs.field(factory=list)
    readme: str = attrs.field(default=DEFAULT_README)

    @generated_by.default
    def generated_by_default(self):
        return [GeneratorMetadata()]


def metadata_converter(metadata):
    if not metadata:
        metadata = {}
    elif not isinstance(metadata, DatasetMetadata):
        metadata = DatasetMetadata(**metadata)
    return metadata
